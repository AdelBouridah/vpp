// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package container;

// Persisted represents configured items for a pod that are persisted.
message Persisted {
    // id is identifier of pod
    string ID = 1;

    // podName
    string podName = 2;

    string podNamespace = 3;

    // Veth1 is name of one end end of veth pair that is in the given container namespace.
    // Nil if TAPs are used instead.
    string Veth1Name = 4;

    // Veth2 is name the other end of veth pair in the default namespace
    // Nil if TAPs are used instead.
    string Veth2Name = 5;

    // VppIf is name AF_PACKET/TAP interface connecting pod to VPP
    string VppIfName = 6;

    // PodTap is name ofthe host end of the tap connecting pod to VPP
    // Nil if TAPs are not used
    string  PodTapName = 7;

    // VppARPEntryInterface is name of the Interface associated with ARP entry configured in VPP to route traffic from VPP to pod.
    string VppARPEntryInterface = 11;
    // VppARPEntryIP is IP associated with ARP entry configured in VPP to route traffic from VPP to pod.
    string VppARPEntryIP = 12;

    // PodARPEntryInterface is name of the Interface associated with ARP entry configured in Linux to route traffic from pod to VPP.
    string PodARPEntryInterface = 13;
    // PodARPEntryIP is IP associated with ARP entry configured in Linux to route traffic from pod to VPP.
    string PodARPEntryIP = 14;

    // VppRouteVrf is vrf of the route from VPP to the container
    uint32 VppRouteVrf = 15;
    // VppRouteDest is destination of the route from VPP to the container
    string VppRouteDest = 16;
    // VppRouteNextHop is next hop of the route from VPP to the container
    string VppRouteNextHop = 17;

    // PodLinkRouteDest is destination of the route from container to default GW.
    string PodLinkRouteDest = 18;
    // PodLinkRouteNextHop is the name of the outgoing interface for the route from container to default GW.
    string PodLinkRouteInterface = 19;

    // PodDefaultRouteInterface is the name of the outgoing interface for pod's default route.
    string PodDefaultRouteInterface = 20;

}