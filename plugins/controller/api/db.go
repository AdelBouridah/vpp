// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

import (
	"fmt"
	"sort"
	"strings"

	"github.com/gogo/protobuf/proto"

	"github.com/ligato/cn-infra/datasync"
)

// KeyValuePairs is a set of key-value pairs.
type KeyValuePairs map[string]proto.Message

// KubeStateData contains Kubernetes state data organized as key-value pairs sorted
// by the resource type.
type KubeStateData map[string]KeyValuePairs // resource name -> {(key, value)}

// ExternalConfig contains marshalled key-value pairs containing external
// (= not generated by contiv-agent) configuration for vpp-agent.
type ExternalConfig map[string]datasync.LazyValue // key -> marshalled proto message

// DBResource represents a Kubernetes resource whose state is reflected in the database.
type DBResource struct {
	// Keyword uniquely identifies the resource among all resources.
	Keyword string

	// KeyPrefix under which instances of this resource are stored in the database.
	KeyPrefix string

	// ProtoMessageName is the name of the protobuf message used to represent
	// the resource (use proto.MessageName to obtain).
	ProtoMessageName string
}

/******************************** DB Resync ***********************************/

// DBResync is a Resync Event that carries snapshot of the database for all watched
// Kubernetes resources and the external configuration (for vpp-agent).
type DBResync struct {
	Local          bool // against local DB?
	KubeState      KubeStateData
	ExternalConfig ExternalConfig
}

// NewDBResync is a constructor for DBResync
func NewDBResync() *DBResync {
	return &DBResync{
		KubeState:      make(KubeStateData),
		ExternalConfig: make(ExternalConfig),
	}
}

// withName is implemented by Kubernetes resources that have a name.
type withName interface {
	// GetName is implemented by resources with Name.
	GetName() string
}

// withNamespace is implemented by Kubernetes resources that are in a namespace.
type withNamespace interface {
	// GetNamespace is implemented by resources with Namespace.
	GetNamespace() string
}

// GetName returns name of the DBResync event.
func (ev *DBResync) GetName() string {
	return "Database Resync"
}

// String describes DBResync event.
func (ev *DBResync) String() string {
	str := ev.GetName()
	if ev.Local {
		str += " (Local DB)"
	} else {
		str += " (Remote DB)"
	}

	// order resources alphabetically
	var resources []string
	for resource := range ev.KubeState {
		resources = append(resources, resource)
	}
	sort.Strings(resources)

	// describe Kubernetes state
	empty := true
	for _, resource := range resources {
		var (
			withColon     string
			resourceItems []string
		)
		data := ev.KubeState[resource]
		for key, value := range data {
			var valueStr string
			valWithName, hasName := value.(withName)
			valWithNamespace, hasNamespace := value.(withNamespace)
			if !hasName {
				valueStr = key
			}
			if hasName && !hasNamespace {
				valueStr = valWithName.GetName()
			}
			if hasName && hasNamespace {
				valueStr = valWithNamespace.GetNamespace() + "/" + valWithName.GetName()
			}
			resourceItems = append(resourceItems, valueStr)
		}
		if len(resourceItems) == 0 {
			continue
		}
		empty = false
		sort.Strings(resourceItems)
		str += fmt.Sprintf("\n* %dx %s%s",
			len(data), resource, withColon)
		for _, resourceItem := range resourceItems {
			str += "\n    - " + resourceItem
		}
	}

	// describe external config if there is any
	var externalKeys []string
	for key := range ev.ExternalConfig {
		externalKeys = append(externalKeys, key)
	}
	sort.Strings(externalKeys)
	if len(externalKeys) > 0 {
		empty = false
		str += fmt.Sprintf("\n* %dx external config items: %s",
			len(externalKeys), strings.Join(externalKeys, ", "))
	}

	// handle empty DB
	if empty {
		str += " - empty dataset"
	}
	return str
}

// Method is FullResync.
func (ev *DBResync) Method() EventMethodType {
	return FullResync
}

// IsBlocking returns false.
func (ev *DBResync) IsBlocking() bool {
	return false
}

// Done is NOOP.
func (ev *DBResync) Done(error) {
	return
}

/***************************** Kube State Change ******************************/

// KubeStateChange is an Update event that represents change for one key from
// Kubernetes state data.
type KubeStateChange struct {
	Key       string
	Resource  string
	PrevValue proto.Message
	NewValue  proto.Message
}

// GetName returns name of the KubeStateChange event.
func (ev *KubeStateChange) GetName() string {
	return "Kubernetes State Change"
}

// String describes KubeStateChange event.
func (ev *KubeStateChange) String() string {
	return fmt.Sprintf("%s\n"+
		"* resource: %s\n"+
		"* key: %s\n"+
		"* prev-value: %s\n"+
		"* new-value: %s", ev.GetName(), ev.Resource, ev.Key,
		protoToString(ev.PrevValue), protoToString(ev.NewValue))
}

// Method is Update.
func (ev *KubeStateChange) Method() EventMethodType {
	return Update
}

// TransactionType is BestEffort.
func (ev *KubeStateChange) TransactionType() UpdateTransactionType {
	return BestEffort
}

// Direction is forward.
func (ev *KubeStateChange) Direction() UpdateDirectionType {
	return Forward
}

// IsBlocking returns false.
func (ev *KubeStateChange) IsBlocking() bool {
	return false
}

// Done is NOOP.
func (ev *KubeStateChange) Done(error) {
	return
}

// protoToString converts proto message to string
func protoToString(msg proto.Message) string {
	if msg == nil {
		return "<nil>"
	}
	return msg.String()
}

/*************************** External Config Change ***************************/

// ExternalConfigChange is an Update event that represents change for one key
// from the external configuration (for vpp-agent).
type ExternalConfigChange struct {
	Key      string
	Revision datasync.WithRevision
	Value    datasync.LazyValue
}

// GetName returns name of the ExternalConfigChange event.
func (ev *ExternalConfigChange) GetName() string {
	return "External Config Change"
}

// String describes ExternalConfigChange event.
func (ev *ExternalConfigChange) String() string {
	return fmt.Sprintf("%s\n"+
		"* key: %s\n"+
		"* revision: %d", ev.GetName(), ev.Key, ev.Revision.GetRevision())
}

// Method is Update.
func (ev *ExternalConfigChange) Method() EventMethodType {
	return Update
}

// TransactionType is BestEffort.
func (ev *ExternalConfigChange) TransactionType() UpdateTransactionType {
	return BestEffort
}

// Direction is Forward.
func (ev *ExternalConfigChange) Direction() UpdateDirectionType {
	return Forward
}

// IsBlocking returns false.
func (ev *ExternalConfigChange) IsBlocking() bool {
	return false
}

// Done is NOOP.
func (ev *ExternalConfigChange) Done(error) {
	return
}
