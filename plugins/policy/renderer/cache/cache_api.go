package cache

import (
	"github.com/contiv/vpp/plugins/policy/renderer"
)

// ContivRuleCacheAPI defines API of a cache used to store Contiv Rules.
// The cache allows renderer to easily calculate the minimal set of changes
// that need to be applied in a given transaction. Furthermore, the cache
// automatically groups ingress/egress rules per-interface into lists
// (see ContivRuleList) with auto-generated IDs that are shared between
// interfaces with equivalent configuration.
// If supported by the destination network stack, the renderer may install
// a list of ingress/egress rules only once and share it among multiple
// associated interfaces.
type ContivRuleCacheAPI interface {
	// NewTxn starts a new transaction. The rendering executes only after
	// Commit() is called.
	// If <resync> is enabled, the supplied configuration will completely
	// replace the existing one, otherwise pods not mentioned in the transaction
	// are left unchanged.
	NewTxn(resync bool) Txn

	// LookupByInterface returns rules assigned to a given interface grouped
	// into lists by the traffic direction. Interfaces with equal ingress and/or
	// egress configuration will share the same lists (same IDs).
	LookupByInterface(ifName string) (ingress, egress *ContivRuleList)
	// TODO: more lookups as needed
}

// Txn defines API of ContivRuleCache transaction.
type Txn interface {
	// Update changes the list of rules for a given interface.
	// The change is applied into the cache during commit.
	// Run Changes() before Commit() to learn the set of pending updates (merged
	// to minimal diff).
	Update(ifName string, ingress []renderer.ContivRule, egress []renderer.ContivRule) error

	// Changes calculates a minimalistic set of changes prepared in the
	// transaction up to this point.
	// Must be run before Commit().
	Changes() (ingress, egress []TxnChange)

	// Commit applies the changes into the underlying cache.
	Commit() error
}

// ContivRuleList is a grouping of all rules applied on one or shared by multiple
// interfaces on the ingress or egress side.
// ContivRuleList is not mutable. Only the list of associated interfaces may
// change.
type ContivRuleList struct {
	// ID is generated by the cache to uniquely identify the list among all
	// lists.
	ID string

	// Rules applied on the ingress or the egress side for one or multiple
	// interfaces.
	Rules []renderer.ContivRule

	// Private can be used by renderer to store the configuration of rules from
	// the list in the format used by the destination network stack.
	Private interface{}
}

// TxnChange represents change in the ContivRuleCache to be performed
// by a transaction.
type TxnChange struct {
	// List of rules that have been been affected by the transaction.
	// Possible changes:
	//   - new list
	//   - removed list
	//   - changed assignment of interfaces
	// List content itself is not mutable. Different content is treated
	// as a new list (and the original list may loose some interfaces
	// or all of them and get removed)
	List *ContivRuleList

	// Set of associated interfaces before the change.
	// Empty for newly added list.
	OldInterfaces []string

	// Set of associated interfaces after the change.
	// Empty for removed list.
	NewInterfaces []string
}
