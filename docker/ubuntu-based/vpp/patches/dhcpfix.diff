diff --git a/src/vnet/dhcp/client.c b/src/vnet/dhcp/client.c
index f8f92a5..8c1fa82 100644
--- a/src/vnet/dhcp/client.c
+++ b/src/vnet/dhcp/client.c
@@ -21,16 +21,23 @@ dhcp_client_main_t dhcp_client_main;
 static u8 *format_dhcp_client_state (u8 * s, va_list * va);
 static vlib_node_registration_t dhcp_client_process_node;
 
-#define foreach_dhcp_client_process_stat        \
+#define foreach_dhcp_sent_packet_stat           \
 _(DISCOVER, "DHCP discover packets sent")       \
 _(OFFER, "DHCP offer packets sent")             \
 _(REQUEST, "DHCP request packets sent")         \
 _(ACK, "DHCP ack packets sent")
 
+#define foreach_dhcp_error_counter                                      \
+_(NOT_FOR_US, "DHCP packets for other hosts, dropped")                  \
+_(NAK, "DHCP nak packets received")                                     \
+_(NON_OFFER_DISCOVER, "DHCP non-offer packets in discover state")       \
+_(ODDBALL, "DHCP non-ack, non-offer packets received")                  \
+_(BOUND, "DHCP bind success")
+
 typedef enum
 {
 #define _(sym,str) DHCP_STAT_##sym,
-  foreach_dhcp_client_process_stat
+  foreach_dhcp_sent_packet_stat foreach_dhcp_error_counter
 #undef _
     DHCP_STAT_UNKNOWN,
   DHCP_STAT_N_STAT,
@@ -38,7 +45,7 @@ typedef enum
 
 static char *dhcp_client_process_stat_strings[] = {
 #define _(sym,string) string,
-  foreach_dhcp_client_process_stat
+  foreach_dhcp_sent_packet_stat foreach_dhcp_error_counter
 #undef _
     "DHCP unknown packets sent",
 };
@@ -225,6 +232,15 @@ dhcp_client_for_us (u32 bi, vlib_buffer_t * b,
   if (c->state == DHCP_BOUND && c->retry_count == 0)
     return 0;
 
+  /* Packet not for us? Turf it... */
+  if (memcmp (dhcp->client_hardware_address, c->client_hardware_address,
+	      sizeof (c->client_hardware_address)))
+    {
+      vlib_node_increment_counter (vm, dhcp_client_process_node.index,
+				   DHCP_STAT_NOT_FOR_US, 1);
+      return 0;
+    }
+
   /* parse through the packet, learn what we can */
   if (dhcp->your_ip_address.as_u32)
     c->leased_address.as_u32 = dhcp->your_ip_address.as_u32;
@@ -300,9 +316,8 @@ dhcp_client_for_us (u32 bi, vlib_buffer_t * b,
     case DHCP_DISCOVER:
       if (dhcp_message_type != DHCP_PACKET_OFFER)
 	{
-	  clib_warning ("sw_if_index %d state %U message type %d",
-			c->sw_if_index, format_dhcp_client_state,
-			c->state, dhcp_message_type);
+	  vlib_node_increment_counter (vm, dhcp_client_process_node.index,
+				       DHCP_STAT_NON_OFFER_DISCOVER, 1);
 	  c->next_transmit = now + 5.0;
 	  break;
 	}
@@ -326,8 +341,39 @@ dhcp_client_for_us (u32 bi, vlib_buffer_t * b,
 
     case DHCP_BOUND:
     case DHCP_REQUEST:
-      if (dhcp_message_type != DHCP_PACKET_ACK)
+      if (dhcp_message_type == DHCP_PACKET_NAK)
+	{
+	  vlib_node_increment_counter (vm, dhcp_client_process_node.index,
+				       DHCP_STAT_NAK, 1);
+	  /* Probably never happens in bound state, but anyhow... */
+	  if (c->state == DHCP_BOUND)
+	    {
+	      ip4_add_del_interface_address (dcm->vlib_main, c->sw_if_index,
+					     (void *) &c->leased_address,
+					     c->subnet_mask_width,
+					     1 /*is_del */ );
+	      vnet_feature_enable_disable ("ip4-unicast",
+					   "ip4-dhcp-client-detect",
+					   c->sw_if_index, 1 /* enable */ ,
+					   0, 0);
+	    }
+	  /* Wipe out any memory of the address we had... */
+	  c->state = DHCP_DISCOVER;
+	  c->next_transmit = now;
+	  c->retry_count = 0;
+	  c->leased_address.as_u32 = 0;
+	  c->subnet_mask_width = 0;
+	  c->router_address.as_u32 = 0;
+	  c->lease_renewal_interval = 0;
+	  c->dhcp_server.as_u32 = 0;
+	  break;
+	}
+
+      if (dhcp_message_type != DHCP_PACKET_ACK &&
+	  dhcp_message_type != DHCP_PACKET_OFFER)
 	{
+	  vlib_node_increment_counter (vm, dhcp_client_process_node.index,
+				       DHCP_STAT_NON_OFFER_DISCOVER, 1);
 	  clib_warning ("sw_if_index %d state %U message type %d",
 			c->sw_if_index, format_dhcp_client_state,
 			c->state, dhcp_message_type);
@@ -343,6 +389,8 @@ dhcp_client_for_us (u32 bi, vlib_buffer_t * b,
       c->retry_count = 0;
       c->next_transmit = now + (f64) c->lease_renewal_interval;
       c->lease_expires = now + (f64) c->lease_lifetime;
+      vlib_node_increment_counter (vm, dhcp_client_process_node.index,
+				   DHCP_STAT_BOUND, 1);
       break;
 
     default:
@@ -450,6 +498,10 @@ send_dhcp_pkt (dhcp_client_main_t * dcm, dhcp_client_t * c,
   /* Send the interface MAC address */
   clib_memcpy (dhcp->client_hardware_address, c->l2_rewrite + 6, 6);
 
+  /* And remember it for rx-packet-for-us checking */
+  clib_memcpy (c->client_hardware_address, dhcp->client_hardware_address,
+	       sizeof (c->client_hardware_address));
+
   /* Lease renewal, set up client_ip_address */
   if (is_broadcast == 0)
     dhcp->client_ip_address.as_u32 = c->leased_address.as_u32;
@@ -555,7 +607,7 @@ send_dhcp_pkt (dhcp_client_main_t * dcm, dhcp_client_t * c,
   switch (type)
     {
 #define _(a,b) case DHCP_PACKET_##a: {counter_index = DHCP_STAT_##a; break;}
-      foreach_dhcp_client_process_stat
+      foreach_dhcp_sent_packet_stat
 #undef _
     default:
       counter_index = DHCP_STAT_UNKNOWN;
@@ -659,7 +711,7 @@ dhcp_bound_state (dhcp_client_main_t * dcm, dhcp_client_t * c, f64 now)
        */
       vnet_feature_enable_disable ("ip4-unicast",
 				   "ip4-dhcp-client-detect",
-				   c->sw_if_index, 1, 0, 0);
+				   c->sw_if_index, 1 /* enable */ , 0, 0);
       return 1;
     }
   return 0;
diff --git a/src/vnet/dhcp/client.h b/src/vnet/dhcp/client.h
index d9c7e25..a90755e 100644
--- a/src/vnet/dhcp/client.h
+++ b/src/vnet/dhcp/client.h
@@ -71,6 +71,11 @@ typedef struct
   /* Information used for event callback */
   u32 client_index;
   u32 pid;
+
+  /* Interface MAC address, so we can do an rx-packet-for-us check */
+  u8 client_hardware_address[6];
+  u8 pad1;
+
   void *event_callback;
 } dhcp_client_t;
 
diff --git a/src/vnet/dhcp/dhcp4_packet.h b/src/vnet/dhcp/dhcp4_packet.h
index 133a1e1..9fbeb02 100644
--- a/src/vnet/dhcp/dhcp4_packet.h
+++ b/src/vnet/dhcp/dhcp4_packet.h
@@ -57,6 +57,7 @@ typedef enum
   DHCP_PACKET_OFFER,
   DHCP_PACKET_REQUEST,
   DHCP_PACKET_ACK = 5,
+  DHCP_PACKET_NAK,
 } dhcp_packet_type_t;
 
 typedef enum dhcp_packet_option_t_
