// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace.proto

package namespace

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LinuxNetNamespace_ReferenceType int32

const (
	LinuxNetNamespace_NETNS_REF_UNDEFINED    LinuxNetNamespace_ReferenceType = 0
	LinuxNetNamespace_NETNS_REF_NSID         LinuxNetNamespace_ReferenceType = 1
	LinuxNetNamespace_NETNS_REF_PID          LinuxNetNamespace_ReferenceType = 2
	LinuxNetNamespace_NETNS_REF_FD           LinuxNetNamespace_ReferenceType = 3
	LinuxNetNamespace_NETNS_REF_MICROSERVICE LinuxNetNamespace_ReferenceType = 4
)

var LinuxNetNamespace_ReferenceType_name = map[int32]string{
	0: "NETNS_REF_UNDEFINED",
	1: "NETNS_REF_NSID",
	2: "NETNS_REF_PID",
	3: "NETNS_REF_FD",
	4: "NETNS_REF_MICROSERVICE",
}
var LinuxNetNamespace_ReferenceType_value = map[string]int32{
	"NETNS_REF_UNDEFINED":    0,
	"NETNS_REF_NSID":         1,
	"NETNS_REF_PID":          2,
	"NETNS_REF_FD":           3,
	"NETNS_REF_MICROSERVICE": 4,
}

func (x LinuxNetNamespace_ReferenceType) String() string {
	return proto.EnumName(LinuxNetNamespace_ReferenceType_name, int32(x))
}
func (LinuxNetNamespace_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_namespace_c921deef2be05dce, []int{0, 0}
}

type LinuxNetNamespace struct {
	Type                 LinuxNetNamespace_ReferenceType `protobuf:"varint,1,opt,name=type,proto3,enum=namespace.LinuxNetNamespace_ReferenceType" json:"type,omitempty"`
	Reference            string                          `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *LinuxNetNamespace) Reset()         { *m = LinuxNetNamespace{} }
func (m *LinuxNetNamespace) String() string { return proto.CompactTextString(m) }
func (*LinuxNetNamespace) ProtoMessage()    {}
func (*LinuxNetNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_namespace_c921deef2be05dce, []int{0}
}
func (m *LinuxNetNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinuxNetNamespace.Unmarshal(m, b)
}
func (m *LinuxNetNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinuxNetNamespace.Marshal(b, m, deterministic)
}
func (dst *LinuxNetNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinuxNetNamespace.Merge(dst, src)
}
func (m *LinuxNetNamespace) XXX_Size() int {
	return xxx_messageInfo_LinuxNetNamespace.Size(m)
}
func (m *LinuxNetNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_LinuxNetNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_LinuxNetNamespace proto.InternalMessageInfo

func (m *LinuxNetNamespace) GetType() LinuxNetNamespace_ReferenceType {
	if m != nil {
		return m.Type
	}
	return LinuxNetNamespace_NETNS_REF_UNDEFINED
}

func (m *LinuxNetNamespace) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func init() {
	proto.RegisterType((*LinuxNetNamespace)(nil), "namespace.LinuxNetNamespace")
	proto.RegisterEnum("namespace.LinuxNetNamespace_ReferenceType", LinuxNetNamespace_ReferenceType_name, LinuxNetNamespace_ReferenceType_value)
}

func init() { proto.RegisterFile("namespace.proto", fileDescriptor_namespace_c921deef2be05dce) }

var fileDescriptor_namespace_c921deef2be05dce = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4b, 0xcc, 0x4d,
	0x2d, 0x2e, 0x48, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x7d, 0x60, 0xe4, 0x12, 0xf4, 0xc9, 0xcc, 0x2b, 0xad, 0xf0, 0x4b, 0x2d, 0xf1, 0x83, 0x89, 0x0a,
	0xd9, 0x71, 0xb1, 0x94, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x69, 0xe9,
	0x21, 0x0c, 0xc0, 0x50, 0xab, 0x17, 0x94, 0x9a, 0x96, 0x5a, 0x94, 0x9a, 0x97, 0x9c, 0x1a, 0x52,
	0x59, 0x90, 0x1a, 0x04, 0xd6, 0x27, 0x24, 0xc3, 0xc5, 0x59, 0x04, 0x13, 0x96, 0x60, 0x52, 0x60,
	0xd4, 0xe0, 0x0c, 0x42, 0x08, 0x28, 0xd5, 0x72, 0xf1, 0xa2, 0x68, 0x12, 0x12, 0xe7, 0x12, 0xf6,
	0x73, 0x0d, 0xf1, 0x0b, 0x8e, 0x0f, 0x72, 0x75, 0x8b, 0x0f, 0xf5, 0x73, 0x71, 0x75, 0xf3, 0xf4,
	0x73, 0x75, 0x11, 0x60, 0x10, 0x12, 0xe2, 0xe2, 0x43, 0x48, 0xf8, 0x05, 0x7b, 0xba, 0x08, 0x30,
	0x0a, 0x09, 0x72, 0xf1, 0x22, 0xc4, 0x02, 0x3c, 0x5d, 0x04, 0x98, 0x84, 0x04, 0xb8, 0x78, 0x10,
	0x42, 0x6e, 0x2e, 0x02, 0xcc, 0x42, 0x52, 0x5c, 0x62, 0x08, 0x11, 0x5f, 0x4f, 0xe7, 0x20, 0xff,
	0x60, 0xd7, 0xa0, 0x30, 0x4f, 0x67, 0x57, 0x01, 0x96, 0x24, 0x36, 0x70, 0x20, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x14, 0x06, 0xec, 0xa3, 0x17, 0x01, 0x00, 0x00,
}
