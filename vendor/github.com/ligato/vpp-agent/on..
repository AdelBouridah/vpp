[33mcommit bc1d85776c1f345a8bd8843ddd5dd18643718aca[m
Author: Milan Lenco <milan.lenco@pantheon.tech>
Date:   Wed Dec 13 09:31:50 2017 +0100

    Use only basic types for parameters of RouteKey().

[1mdiff --git a/clientv1/defaultplugins/dbadapter/data_change_db.go b/clientv1/defaultplugins/dbadapter/data_change_db.go[m
[1mindex 2154116..70e1f73 100644[m
[1m--- a/clientv1/defaultplugins/dbadapter/data_change_db.go[m
[1m+++ b/clientv1/defaultplugins/dbadapter/data_change_db.go[m
[36m@@ -15,8 +15,6 @@[m
 package dbadapter[m
 [m
 import ([m
[31m-	"net"[m
[31m-[m
 	"strconv"[m
 [m
 	"github.com/ligato/cn-infra/db/keyval"[m
[36m@@ -119,8 +117,7 @@[m [mfunc (dsl *PutDSL) XConnect(val *l2.XConnectPairs_XConnectPair) defaultplugins.P[m
 [m
 // StaticRoute adds a request to create or update VPP L3 Static Route.[m
 func (dsl *PutDSL) StaticRoute(val *l3.StaticRoutes_Route) defaultplugins.PutDSL {[m
[31m-	_, dstAddr, _ := net.ParseCIDR(val.DstIpAddr)[m
[31m-	dsl.parent.txn.Put(l3.RouteKey(val.VrfId, dstAddr, val.NextHopAddr), val)[m
[32m+[m	[32mdsl.parent.txn.Put(l3.RouteKey(val.VrfId, val.DstIpAddr, val.NextHopAddr), val)[m
 	return dsl[m
 }[m
 [m
[36m@@ -214,8 +211,7 @@[m [mfunc (dsl *DeleteDSL) XConnect(rxIfName string) defaultplugins.DeleteDSL {[m
 [m
 // StaticRoute adds a request to delete an existing VPP L3 Static Route.[m
 func (dsl *DeleteDSL) StaticRoute(vrf uint32, dstAddr string, nextHopAddr string) defaultplugins.DeleteDSL {[m
[31m-	_, dstNet, _ := net.ParseCIDR(dstAddr)[m
[31m-	dsl.parent.txn.Delete(l3.RouteKey(vrf, dstNet, nextHopAddr))[m
[32m+[m	[32mdsl.parent.txn.Delete(l3.RouteKey(vrf, dstAddr, nextHopAddr))[m
 	return dsl[m
 }[m
 [m
[1mdiff --git a/clientv1/defaultplugins/dbadapter/data_resync_db.go b/clientv1/defaultplugins/dbadapter/data_resync_db.go[m
[1mindex 966b023..9e12dc2 100644[m
[1m--- a/clientv1/defaultplugins/dbadapter/data_resync_db.go[m
[1m+++ b/clientv1/defaultplugins/dbadapter/data_resync_db.go[m
[36m@@ -15,8 +15,6 @@[m
 package dbadapter[m
 [m
 import ([m
[31m-	"net"[m
[31m-[m
 	"github.com/ligato/cn-infra/db/keyval"[m
 	"github.com/ligato/vpp-agent/clientv1/defaultplugins"[m
 	"github.com/ligato/vpp-agent/plugins/defaultplugins/aclplugin/model/acl"[m
[36m@@ -113,8 +111,7 @@[m [mfunc (dsl *DataResyncDSL) XConnect(val *l2.XConnectPairs_XConnectPair) defaultpl[m
 [m
 // StaticRoute adds L3 Static Route to the RESYNC request.[m
 func (dsl *DataResyncDSL) StaticRoute(val *l3.StaticRoutes_Route) defaultplugins.DataResyncDSL {[m
[31m-	_, dstAddr, _ := net.ParseCIDR(val.DstIpAddr)[m
[31m-	key := l3.RouteKey(val.VrfId, dstAddr, val.NextHopAddr)[m
[32m+[m	[32mkey := l3.RouteKey(val.VrfId, val.DstIpAddr, val.NextHopAddr)[m
 	dsl.txn.Put(key, val)[m
 	dsl.txnKeys = append(dsl.txnKeys, key)[m
 [m
[1mdiff --git a/clientv1/defaultplugins/grpcadapter/data_change_grpc.go b/clientv1/defaultplugins/grpcadapter/data_change_grpc.go[m
[1mindex 5163e0d..b875c23 100644[m
[1m--- a/clientv1/defaultplugins/grpcadapter/data_change_grpc.go[m
[1m+++ b/clientv1/defaultplugins/grpcadapter/data_change_grpc.go[m
[36m@@ -15,6 +15,8 @@[m
 package grpcadapter[m
 [m
 import ([m
[32m+[m	[32m"strconv"[m
[32m+[m
 	"github.com/ligato/vpp-agent/clientv1/defaultplugins"[m
 	"github.com/ligato/vpp-agent/flavors/rpc/model/vppsvc"[m
 	"github.com/ligato/vpp-agent/plugins/defaultplugins/aclplugin/model/acl"[m
[36m@@ -24,8 +26,6 @@[m [mimport ([m
 	"github.com/ligato/vpp-agent/plugins/defaultplugins/l3plugin/model/l3"[m
 	"github.com/ligato/vpp-agent/plugins/defaultplugins/l4plugin/model/l4"[m
 	"golang.org/x/net/context"[m
[31m-	"net"[m
[31m-	"strconv"[m
 )[m
 [m
 // NewDataChangeDSL is a constructor[m
[36m@@ -143,8 +143,7 @@[m [mfunc (dsl *PutDSL) XConnect(val *l2.XConnectPairs_XConnectPair) defaultplugins.P[m
 [m
 // StaticRoute creates or updates the L3 Static Route.[m
 func (dsl *PutDSL) StaticRoute(val *l3.StaticRoutes_Route) defaultplugins.PutDSL {[m
[31m-	_, dstAddr, _ := net.ParseCIDR(val.DstIpAddr)[m
[31m-	dsl.parent.txnPutStaticRoute[l3.RouteKey(val.VrfId, dstAddr, val.NextHopAddr)] = val[m
[32m+[m	[32mdsl.parent.txnPutStaticRoute[l3.RouteKey(val.VrfId, val.DstIpAddr, val.NextHopAddr)] = val[m
 [m
 	return dsl[m
 }[m
[36m@@ -240,10 +239,9 @@[m [mfunc (dsl *DeleteDSL) XConnect(rxIfName string) defaultplugins.DeleteDSL {[m
 }[m
 [m
 // StaticRoute deletes the L3 Static Route.[m
[31m-func (dsl *DeleteDSL) StaticRoute(vrf uint32, dstAddrInput *net.IPNet, nextHopAddr net.IP) defaultplugins.DeleteDSL {[m
[31m-	//_, dstAddr, _ := net.ParseCIDR(dstAddrInput)[m
[31m-	dsl.parent.txnDelStaticRoute[l3.RouteKey(vrf, dstAddrInput, nextHopAddr.String())] =[m
[31m-		&vppsvc.DelStaticRoutesRequest_DelStaticRoute{vrf, dstAddrInput.String(), nextHopAddr.String()}[m
[32m+[m[32mfunc (dsl *DeleteDSL) StaticRoute(vrf uint32, dstAddr string, nextHopAddr string) defaultplugins.DeleteDSL {[m
[32m+[m	[32mdsl.parent.txnDelStaticRoute[l3.RouteKey(vrf, dstAddr, nextHopAddr)] =[m
[32m+[m		[32m&vppsvc.DelStaticRoutesRequest_DelStaticRoute{vrf, dstAddr, nextHopAddr}[m
 [m
 	return dsl[m
 }[m
[1mdiff --git a/clientv1/defaultplugins/grpcadapter/data_resync_grpc.go b/clientv1/defaultplugins/grpcadapter/data_resync_grpc.go[m
[1mindex ba0f234..34f174f 100644[m
[1m--- a/clientv1/defaultplugins/grpcadapter/data_resync_grpc.go[m
[1m+++ b/clientv1/defaultplugins/grpcadapter/data_resync_grpc.go[m
[36m@@ -15,7 +15,7 @@[m
 package grpcadapter[m
 [m
 import ([m
[31m-	"net"[m
[32m+[m	[32m"strconv"[m
 [m
 	"github.com/ligato/cn-infra/db/keyval"[m
 	"github.com/ligato/vpp-agent/clientv1/defaultplugins"[m
[36m@@ -27,7 +27,6 @@[m [mimport ([m
 	"github.com/ligato/vpp-agent/plugins/defaultplugins/l3plugin/model/l3"[m
 	"github.com/ligato/vpp-agent/plugins/defaultplugins/l4plugin/model/l4"[m
 	"golang.org/x/net/context"[m
[31m-	"strconv"[m
 )[m
 [m
 // NewDataResyncDSL is a constructor.[m
[36m@@ -115,8 +114,7 @@[m [mfunc (dsl *DataResyncDSL) XConnect(val *l2.XConnectPairs_XConnectPair) defaultpl[m
 [m
 // StaticRoute adds L3 Static Route to the RESYNC request.[m
 func (dsl *DataResyncDSL) StaticRoute(val *l3.StaticRoutes_Route) defaultplugins.DataResyncDSL {[m
[31m-	_, dstAddr, _ := net.ParseCIDR(val.DstIpAddr)[m
[31m-	dsl.txnPutStaticRoute[l3.RouteKey(val.VrfId, dstAddr, val.NextHopAddr)] = val[m
[32m+[m	[32mdsl.txnPutStaticRoute[l3.RouteKey(val.VrfId, val.DstIpAddr, val.NextHopAddr)] = val[m
 [m
 	return dsl[m
 }[m
[1mdiff --git a/cmd/agentctl/utils/print_json.go b/cmd/agentctl/utils/print_json.go[m
[1mindex 29caacc..4ba2ff2 100644[m
[1m--- a/cmd/agentctl/utils/print_json.go[m
[1m+++ b/cmd/agentctl/utils/print_json.go[m
[36m@@ -18,7 +18,6 @@[m [mimport ([m
 	"bytes"[m
 	"encoding/json"[m
 	"fmt"[m
[31m-	"net"[m
 	"sort"[m
 	"strings"[m
 [m
[36m@@ -262,9 +261,8 @@[m [mfunc getL3FIBData(fibData StaticRoutesWithMD) (*l3.StaticRoutes, []string) {[m
 	fibRoot.Route = fibData.Routes[m
 	var keyset []string[m
 	for _, fib := range fibData.Routes {[m
[31m-		_, dstNetAddr, err := net.ParseCIDR(fib.DstIpAddr)[m
 		if err == nil {[m
[31m-			keyset = append(keyset, l3.RouteKey(fib.VrfId, dstNetAddr, fib.NextHopAddr))[m
[32m+[m			[32mkeyset = append(keyset, l3.RouteKey(fib.VrfId, fib.DstIpAddr, fib.NextHopAddr))[m
 		}[m
 	}[m
 	sort.Strings(keyset)[m
[1mdiff --git a/cmd/vpp-agent-ctl/main.go b/cmd/vpp-agent-ctl/main.go[m
[1mindex a6e66d7..7fdd4b9 100644[m
[1m--- a/cmd/vpp-agent-ctl/main.go[m
[1m+++ b/cmd/vpp-agent-ctl/main.go[m
[36m@@ -28,8 +28,6 @@[m [mimport ([m
 [m
 	"github.com/namsral/flag"[m
 [m
[31m-	"net"[m
[31m-[m
 	"github.com/ligato/cn-infra/config"[m
 	"github.com/ligato/cn-infra/datasync"[m
 	"github.com/ligato/cn-infra/db/keyval"[m
[36m@@ -450,24 +448,13 @@[m [mfunc createRoute(db keyval.ProtoBroker) {[m
 		},[m
 	}[m
 [m
[31m-	_, dstNetAddr, err := net.ParseCIDR(routes.Route[0].DstIpAddr)[m
[31m-	if err != nil {[m
[31m-		log.Errorf("Error parsing address %v", routes.Route[0].DstIpAddr)[m
[31m-		return[m
[31m-	}[m
[31m-[m
[31m-	key := l3.RouteKey(routes.Route[0].VrfId, dstNetAddr, routes.Route[0].NextHopAddr)[m
[32m+[m	[32mkey := l3.RouteKey(routes.Route[0].VrfId, routes.Route[0].DstIpAddr, routes.Route[0].NextHopAddr)[m
 	db.Put(key, routes.Route[0])[m
 	log.Printf("Adding route %v", key)[m
 }[m
 [m
 func deleteRoute(db keyval.ProtoBroker, routeDstIP string, routeNhIP string) {[m
[31m-	_, dstNetAddr, err := net.ParseCIDR(routeDstIP)[m
[31m-	if err != nil {[m
[31m-		log.Errorf("Error parsing address %v", routeDstIP)[m
[31m-		return[m
[31m-	}[m
[31m-	path := l3.RouteKey(0, dstNetAddr, "192.168.1.13")[m
[32m+[m	[32mpath := l3.RouteKey(0, routeDstIP, "192.168.1.13")[m
 	db.Delete(path)[m
 	log.WithField("path", path).Debug("Removing route")[m
 }[m
[1mdiff --git a/plugins/defaultplugins/l3plugin/model/l3/keys_agent_l3.go b/plugins/defaultplugins/l3plugin/model/l3/keys_agent_l3.go[m
[1mindex bec2ada..e323a99 100644[m
[1m--- a/plugins/defaultplugins/l3plugin/model/l3/keys_agent_l3.go[m
[1m+++ b/plugins/defaultplugins/l3plugin/model/l3/keys_agent_l3.go[m
[36m@@ -57,9 +57,10 @@[m [mfunc ArpKeyPrefix() string {[m
 }[m
 [m
 // RouteKey returns the key used in ETCD to store vpp route for vpp instance.[m
[31m-func RouteKey(vrf uint32, dstAddr *net.IPNet, nextHopAddr string) string {[m
[31m-	dstNetAddr := dstAddr.IP.String()[m
[31m-	dstNetMask, _ := dstAddr.Mask.Size()[m
[32m+[m[32mfunc RouteKey(vrf uint32, dstAddr string, nextHopAddr string) string {[m
[32m+[m	[32m_, dstNet, _ := net.ParseCIDR(dstAddr)[m
[32m+[m	[32mdstNetAddr := dstNet.IP.String()[m
[32m+[m	[32mdstNetMask, _ := dstNet.Mask.Size()[m
 	key := RoutesPrefix[m
 	key = strings.Replace(key, "{vrf}", strconv.Itoa(int(vrf)), 1)[m
 	key = strings.Replace(key, "{net}", dstNetAddr, 1)[m
